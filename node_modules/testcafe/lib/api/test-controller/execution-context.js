"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vm_1 = require("vm");
const module_1 = __importDefault(require("module"));
const path_1 = require("path");
const exportable_lib_1 = __importDefault(require("../exportable-lib"));
const OPTIONS_KEY = Symbol('options');
function createRequire(filename) {
    if (module_1.default.createRequireFromPath)
        return module_1.default.createRequireFromPath(filename);
    const dummyModule = new module_1.default(filename, module);
    dummyModule.filename = filename;
    dummyModule.paths = [filename].concat(module.paths);
    return id => dummyModule.require(id);
}
function createSelectorDefinition(testRun) {
    return (fn, options = {}) => {
        const { skipVisibilityCheck, collectionMode } = testRun.controller.getExecutionContext()[OPTIONS_KEY];
        if (skipVisibilityCheck)
            options.visibilityCheck = false;
        if (testRun && testRun.id)
            options.boundTestRun = testRun;
        if (collectionMode)
            options.collectionMode = collectionMode;
        return exportable_lib_1.default.Selector(fn, options);
    };
}
function createClientFunctionDefinition(testRun) {
    return (fn, options = {}) => {
        if (testRun && testRun.id)
            options.boundTestRun = testRun;
        return exportable_lib_1.default.ClientFunction(fn, options);
    };
}
function setContextOptions(context, options) {
    context[OPTIONS_KEY] = options;
}
exports.setContextOptions = setContextOptions;
function createExecutionContext(testRun) {
    const filename = testRun.test.testFile.filename;
    const replacers = {
        require: createRequire(filename),
        __filename: filename,
        __dirname: path_1.dirname(filename),
        t: testRun.controller,
        Selector: createSelectorDefinition(testRun),
        ClientFunction: createClientFunctionDefinition(testRun),
        Role: exportable_lib_1.default.Role,
        RequestLogger: exportable_lib_1.default.RequestLogger,
        RequestMock: exportable_lib_1.default.RequestMock,
        RequestHook: exportable_lib_1.default.RequestHook
    };
    return vm_1.createContext(new Proxy(replacers, {
        get: (target, property) => {
            if (replacers.hasOwnProperty(property))
                return replacers[property];
            if (global.hasOwnProperty(property))
                return global[property];
            throw new Error(`${property} is not defined`);
        }
    }));
}
exports.createExecutionContext = createExecutionContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0aW9uLWNvbnRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBpL3Rlc3QtY29udHJvbGxlci9leGVjdXRpb24tY29udGV4dC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJCQUFtQztBQUNuQyxvREFBNEI7QUFDNUIsK0JBQStCO0FBQy9CLHVFQUE4QztBQUU5QyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFdEMsU0FBUyxhQUFhLENBQUUsUUFBUTtJQUM1QixJQUFJLGdCQUFNLENBQUMscUJBQXFCO1FBQzVCLE9BQU8sZ0JBQU0sQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVsRCxNQUFNLFdBQVcsR0FBRyxJQUFJLGdCQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRWpELFdBQVcsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQ2hDLFdBQVcsQ0FBQyxLQUFLLEdBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXZELE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxTQUFTLHdCQUF3QixDQUFFLE9BQU87SUFDdEMsT0FBTyxDQUFDLEVBQUUsRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLEVBQUU7UUFDeEIsTUFBTSxFQUFFLG1CQUFtQixFQUFFLGNBQWMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUV0RyxJQUFJLG1CQUFtQjtZQUNuQixPQUFPLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztRQUVwQyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsRUFBRTtZQUNyQixPQUFPLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztRQUVuQyxJQUFJLGNBQWM7WUFDZCxPQUFPLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUU1QyxPQUFPLHdCQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQsU0FBUyw4QkFBOEIsQ0FBRSxPQUFPO0lBQzVDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsT0FBTyxHQUFHLEVBQUUsRUFBRSxFQUFFO1FBQ3hCLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1FBRW5DLE9BQU8sd0JBQWEsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFnQixpQkFBaUIsQ0FBRSxPQUFPLEVBQUUsT0FBTztJQUMvQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ25DLENBQUM7QUFGRCw4Q0FFQztBQUVELFNBQWdCLHNCQUFzQixDQUFFLE9BQU87SUFDM0MsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBRWhELE1BQU0sU0FBUyxHQUFHO1FBQ2QsT0FBTyxFQUFTLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDdkMsVUFBVSxFQUFNLFFBQVE7UUFDeEIsU0FBUyxFQUFPLGNBQU8sQ0FBQyxRQUFRLENBQUM7UUFDakMsQ0FBQyxFQUFlLE9BQU8sQ0FBQyxVQUFVO1FBQ2xDLFFBQVEsRUFBUSx3QkFBd0IsQ0FBQyxPQUFPLENBQUM7UUFDakQsY0FBYyxFQUFFLDhCQUE4QixDQUFDLE9BQU8sQ0FBQztRQUN2RCxJQUFJLEVBQVksd0JBQWEsQ0FBQyxJQUFJO1FBQ2xDLGFBQWEsRUFBRyx3QkFBYSxDQUFDLGFBQWE7UUFDM0MsV0FBVyxFQUFLLHdCQUFhLENBQUMsV0FBVztRQUN6QyxXQUFXLEVBQUssd0JBQWEsQ0FBQyxXQUFXO0tBQzVDLENBQUM7SUFFRixPQUFPLGtCQUFhLENBQUMsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1FBQ3RDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUN0QixJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO2dCQUNsQyxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUUvQixJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO2dCQUMvQixPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUU1QixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsUUFBUSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2xELENBQUM7S0FDSixDQUFDLENBQUMsQ0FBQztBQUNSLENBQUM7QUEzQkQsd0RBMkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3ZtJztcbmltcG9ydCBNb2R1bGUgZnJvbSAnbW9kdWxlJztcbmltcG9ydCB7IGRpcm5hbWUgfSBmcm9tICdwYXRoJztcbmltcG9ydCBleHBvcnRhYmxlTGliIGZyb20gJy4uL2V4cG9ydGFibGUtbGliJztcblxuY29uc3QgT1BUSU9OU19LRVkgPSBTeW1ib2woJ29wdGlvbnMnKTtcblxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZSAoZmlsZW5hbWUpIHtcbiAgICBpZiAoTW9kdWxlLmNyZWF0ZVJlcXVpcmVGcm9tUGF0aClcbiAgICAgICAgcmV0dXJuIE1vZHVsZS5jcmVhdGVSZXF1aXJlRnJvbVBhdGgoZmlsZW5hbWUpO1xuXG4gICAgY29uc3QgZHVtbXlNb2R1bGUgPSBuZXcgTW9kdWxlKGZpbGVuYW1lLCBtb2R1bGUpO1xuXG4gICAgZHVtbXlNb2R1bGUuZmlsZW5hbWUgPSBmaWxlbmFtZTtcbiAgICBkdW1teU1vZHVsZS5wYXRocyAgICA9IFtmaWxlbmFtZV0uY29uY2F0KG1vZHVsZS5wYXRocyk7XG5cbiAgICByZXR1cm4gaWQgPT4gZHVtbXlNb2R1bGUucmVxdWlyZShpZCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yRGVmaW5pdGlvbiAodGVzdFJ1bikge1xuICAgIHJldHVybiAoZm4sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICBjb25zdCB7IHNraXBWaXNpYmlsaXR5Q2hlY2ssIGNvbGxlY3Rpb25Nb2RlIH0gPSB0ZXN0UnVuLmNvbnRyb2xsZXIuZ2V0RXhlY3V0aW9uQ29udGV4dCgpW09QVElPTlNfS0VZXTtcblxuICAgICAgICBpZiAoc2tpcFZpc2liaWxpdHlDaGVjaylcbiAgICAgICAgICAgIG9wdGlvbnMudmlzaWJpbGl0eUNoZWNrID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRlc3RSdW4gJiYgdGVzdFJ1bi5pZClcbiAgICAgICAgICAgIG9wdGlvbnMuYm91bmRUZXN0UnVuID0gdGVzdFJ1bjtcblxuICAgICAgICBpZiAoY29sbGVjdGlvbk1vZGUpXG4gICAgICAgICAgICBvcHRpb25zLmNvbGxlY3Rpb25Nb2RlID0gY29sbGVjdGlvbk1vZGU7XG5cbiAgICAgICAgcmV0dXJuIGV4cG9ydGFibGVMaWIuU2VsZWN0b3IoZm4sIG9wdGlvbnMpO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudEZ1bmN0aW9uRGVmaW5pdGlvbiAodGVzdFJ1bikge1xuICAgIHJldHVybiAoZm4sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICBpZiAodGVzdFJ1biAmJiB0ZXN0UnVuLmlkKVxuICAgICAgICAgICAgb3B0aW9ucy5ib3VuZFRlc3RSdW4gPSB0ZXN0UnVuO1xuXG4gICAgICAgIHJldHVybiBleHBvcnRhYmxlTGliLkNsaWVudEZ1bmN0aW9uKGZuLCBvcHRpb25zKTtcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29udGV4dE9wdGlvbnMgKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBjb250ZXh0W09QVElPTlNfS0VZXSA9IG9wdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFeGVjdXRpb25Db250ZXh0ICh0ZXN0UnVuKSB7XG4gICAgY29uc3QgZmlsZW5hbWUgPSB0ZXN0UnVuLnRlc3QudGVzdEZpbGUuZmlsZW5hbWU7XG5cbiAgICBjb25zdCByZXBsYWNlcnMgPSB7XG4gICAgICAgIHJlcXVpcmU6ICAgICAgICBjcmVhdGVSZXF1aXJlKGZpbGVuYW1lKSxcbiAgICAgICAgX19maWxlbmFtZTogICAgIGZpbGVuYW1lLFxuICAgICAgICBfX2Rpcm5hbWU6ICAgICAgZGlybmFtZShmaWxlbmFtZSksXG4gICAgICAgIHQ6ICAgICAgICAgICAgICB0ZXN0UnVuLmNvbnRyb2xsZXIsXG4gICAgICAgIFNlbGVjdG9yOiAgICAgICBjcmVhdGVTZWxlY3RvckRlZmluaXRpb24odGVzdFJ1biksXG4gICAgICAgIENsaWVudEZ1bmN0aW9uOiBjcmVhdGVDbGllbnRGdW5jdGlvbkRlZmluaXRpb24odGVzdFJ1biksXG4gICAgICAgIFJvbGU6ICAgICAgICAgICBleHBvcnRhYmxlTGliLlJvbGUsXG4gICAgICAgIFJlcXVlc3RMb2dnZXI6ICBleHBvcnRhYmxlTGliLlJlcXVlc3RMb2dnZXIsXG4gICAgICAgIFJlcXVlc3RNb2NrOiAgICBleHBvcnRhYmxlTGliLlJlcXVlc3RNb2NrLFxuICAgICAgICBSZXF1ZXN0SG9vazogICAgZXhwb3J0YWJsZUxpYi5SZXF1ZXN0SG9va1xuICAgIH07XG5cbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChuZXcgUHJveHkocmVwbGFjZXJzLCB7XG4gICAgICAgIGdldDogKHRhcmdldCwgcHJvcGVydHkpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXBsYWNlcnMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlcnNbcHJvcGVydHldO1xuXG4gICAgICAgICAgICBpZiAoZ2xvYmFsLmhhc093blByb3BlcnR5KHByb3BlcnR5KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsW3Byb3BlcnR5XTtcblxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Byb3BlcnR5fSBpcyBub3QgZGVmaW5lZGApO1xuICAgICAgICB9XG4gICAgfSkpO1xufVxuIl19
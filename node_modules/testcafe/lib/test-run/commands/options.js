"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assignable_1 = __importDefault(require("../../utils/assignable"));
const factories_1 = require("./validations/factories");
const test_run_1 = require("../../errors/test-run");
exports.integerOption = factories_1.createIntegerValidator(test_run_1.ActionIntegerOptionError);
exports.positiveIntegerOption = factories_1.createPositiveIntegerValidator(test_run_1.ActionPositiveIntegerOptionError);
exports.booleanOption = factories_1.createBooleanValidator(test_run_1.ActionBooleanOptionError);
exports.speedOption = factories_1.createSpeedValidator(test_run_1.ActionSpeedOptionError);
// Acitons
class ActionOptions extends assignable_1.default {
    constructor(obj, validate) {
        super();
        this.speed = null;
        this._assignFrom(obj, validate);
    }
    _getAssignableProperties() {
        return [
            { name: 'speed', type: exports.speedOption }
        ];
    }
}
exports.ActionOptions = ActionOptions;
// Offset
class OffsetOptions extends ActionOptions {
    constructor(obj, validate) {
        super();
        this.offsetX = null;
        this.offsetY = null;
        this._assignFrom(obj, validate);
    }
    _getAssignableProperties() {
        return super._getAssignableProperties().concat([
            { name: 'offsetX', type: exports.integerOption },
            { name: 'offsetY', type: exports.integerOption }
        ]);
    }
}
exports.OffsetOptions = OffsetOptions;
class ScrollOptions extends OffsetOptions {
    constructor(obj, validate) {
        super();
        this.scrollToCenter = false;
        this.skipParentFrames = false;
        this._assignFrom(obj, validate);
    }
    _getAssignableProperties() {
        return super._getAssignableProperties().concat([
            { name: 'scrollToCenter', type: exports.booleanOption },
            { name: 'skipParentFrames', type: exports.booleanOption }
        ]);
    }
}
exports.ScrollOptions = ScrollOptions;
// Element Screenshot
class ElementScreenshotOptions extends ActionOptions {
    constructor(obj, validate) {
        super();
        this.scrollTargetX = null;
        this.scrollTargetY = null;
        this.includeMargins = false;
        this.includeBorders = true;
        this.includePaddings = true;
        this.crop = {
            left: null,
            right: null,
            top: null,
            bottom: null
        };
        this._assignFrom(obj, validate);
    }
    _getAssignableProperties() {
        return super._getAssignableProperties().concat([
            { name: 'scrollTargetX', type: exports.integerOption },
            { name: 'scrollTargetY', type: exports.integerOption },
            { name: 'crop.left', type: exports.integerOption },
            { name: 'crop.right', type: exports.integerOption },
            { name: 'crop.top', type: exports.integerOption },
            { name: 'crop.bottom', type: exports.integerOption },
            { name: 'includeMargins', type: exports.booleanOption },
            { name: 'includeBorders', type: exports.booleanOption },
            { name: 'includePaddings', type: exports.booleanOption }
        ]);
    }
}
exports.ElementScreenshotOptions = ElementScreenshotOptions;
// Mouse
class MouseOptions extends OffsetOptions {
    constructor(obj, validate) {
        super();
        this.modifiers = {
            ctrl: false,
            alt: false,
            shift: false,
            meta: false
        };
        this._assignFrom(obj, validate);
    }
    _getAssignableProperties() {
        return super._getAssignableProperties().concat([
            { name: 'modifiers.ctrl', type: exports.booleanOption },
            { name: 'modifiers.alt', type: exports.booleanOption },
            { name: 'modifiers.shift', type: exports.booleanOption },
            { name: 'modifiers.meta', type: exports.booleanOption }
        ]);
    }
}
exports.MouseOptions = MouseOptions;
// Click
class ClickOptions extends MouseOptions {
    constructor(obj, validate) {
        super();
        this.caretPos = null;
        this._assignFrom(obj, validate);
    }
    _getAssignableProperties() {
        return super._getAssignableProperties().concat([
            { name: 'caretPos', type: exports.positiveIntegerOption }
        ]);
    }
}
exports.ClickOptions = ClickOptions;
// Move
class MoveOptions extends MouseOptions {
    constructor(obj, validate) {
        super();
        this.speed = null;
        this.minMovingTime = null;
        this.holdLeftButton = false;
        this.skipScrolling = false;
        this.skipDefaultDragBehavior = false;
        this._assignFrom(obj, validate);
    }
    _getAssignableProperties() {
        return super._getAssignableProperties().concat([
            { name: 'speed' },
            { name: 'minMovingTime' },
            { name: 'holdLeftButton' },
            { name: 'skipScrolling', type: exports.booleanOption },
            { name: 'skipDefaultDragBehavior', type: exports.booleanOption }
        ]);
    }
}
exports.MoveOptions = MoveOptions;
// Type
class TypeOptions extends ClickOptions {
    constructor(obj, validate) {
        super();
        this.replace = false;
        this.paste = false;
        this._assignFrom(obj, validate);
    }
    _getAssignableProperties() {
        return super._getAssignableProperties().concat([
            { name: 'replace', type: exports.booleanOption },
            { name: 'paste', type: exports.booleanOption }
        ]);
    }
}
exports.TypeOptions = TypeOptions;
// DragToElement
class DragToElementOptions extends MouseOptions {
    constructor(obj, validate) {
        super(obj, validate);
        this.destinationOffsetX = null;
        this.destinationOffsetY = null;
        this._assignFrom(obj, validate);
    }
    _getAssignableProperties() {
        return super._getAssignableProperties().concat([
            { name: 'destinationOffsetX', type: exports.integerOption },
            { name: 'destinationOffsetY', type: exports.integerOption }
        ]);
    }
}
exports.DragToElementOptions = DragToElementOptions;
//ResizeToFitDevice
class ResizeToFitDeviceOptions extends assignable_1.default {
    constructor(obj, validate) {
        super();
        this.portraitOrientation = false;
        this._assignFrom(obj, validate);
    }
    _getAssignableProperties() {
        return [
            { name: 'portraitOrientation', type: exports.booleanOption }
        ];
    }
}
exports.ResizeToFitDeviceOptions = ResizeToFitDeviceOptions;
//Assertion
class AssertionOptions extends assignable_1.default {
    constructor(obj, validate) {
        super();
        this.timeout = void 0;
        this.allowUnawaitedPromise = false;
        this._assignFrom(obj, validate);
    }
    _getAssignableProperties() {
        return [
            { name: 'timeout', type: exports.positiveIntegerOption },
            { name: 'allowUnawaitedPromise', type: exports.booleanOption }
        ];
    }
}
exports.AssertionOptions = AssertionOptions;
//# sourceMappingURL=data:application/json;base64,
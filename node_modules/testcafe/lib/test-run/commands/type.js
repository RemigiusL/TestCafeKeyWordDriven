"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    click: 'click',
    rightClick: 'right-click',
    doubleClick: 'double-click',
    drag: 'drag',
    dragToElement: 'drag-to-element',
    hover: 'hover',
    typeText: 'type-text',
    selectText: 'select-text',
    selectTextAreaContent: 'select-text-area-content',
    selectEditableContent: 'select-editable-content',
    pressKey: 'press-key',
    wait: 'wait',
    navigateTo: 'navigate-to',
    setFilesToUpload: 'set-files-to-upload',
    clearUpload: 'clear-upload',
    executeClientFunction: 'execute-client-function',
    executeSelector: 'execute-selector',
    takeScreenshot: 'take-screenshot',
    takeElementScreenshot: 'take-element-screenshot',
    takeScreenshotOnFail: 'take-screenshot-on-fail',
    prepareBrowserManipulation: 'prepare-browser-manipulation',
    showAssertionRetriesStatus: 'show-assertion-retries-status',
    hideAssertionRetriesStatus: 'hide-assertion-retries-status',
    setBreakpoint: 'set-breakpoint',
    resizeWindow: 'resize-window',
    resizeWindowToFitDevice: 'resize-window-to-fit-device',
    maximizeWindow: 'maximize-window',
    switchToIframe: 'switch-to-iframe',
    switchToMainWindow: 'switch-to-main-window',
    setNativeDialogHandler: 'set-native-dialog-handler',
    getNativeDialogHistory: 'get-native-dialog-history',
    getBrowserConsoleMessages: 'get-browser-console-messages',
    setTestSpeed: 'set-test-speed',
    setPageLoadTimeout: 'set-page-load-timeout',
    debug: 'debug',
    assertion: 'assertion',
    useRole: 'useRole',
    testDone: 'test-done',
    backupStorages: 'backup-storages',
    executeExpression: 'execute-expression',
    executeAsyncExpression: 'execute-async-expression',
    unlockPage: 'unlock-page'
};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy90eXBlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxnRUFBZ0U7QUFDaEUsZ0VBQWdFO0FBQ2hFLCtDQUErQztBQUMvQyxnRUFBZ0U7O0FBRWhFLGtCQUFlO0lBQ1gsS0FBSyxFQUF1QixPQUFPO0lBQ25DLFVBQVUsRUFBa0IsYUFBYTtJQUN6QyxXQUFXLEVBQWlCLGNBQWM7SUFDMUMsSUFBSSxFQUF3QixNQUFNO0lBQ2xDLGFBQWEsRUFBZSxpQkFBaUI7SUFDN0MsS0FBSyxFQUF1QixPQUFPO0lBQ25DLFFBQVEsRUFBb0IsV0FBVztJQUN2QyxVQUFVLEVBQWtCLGFBQWE7SUFDekMscUJBQXFCLEVBQU8sMEJBQTBCO0lBQ3RELHFCQUFxQixFQUFPLHlCQUF5QjtJQUNyRCxRQUFRLEVBQW9CLFdBQVc7SUFDdkMsSUFBSSxFQUF3QixNQUFNO0lBQ2xDLFVBQVUsRUFBa0IsYUFBYTtJQUN6QyxnQkFBZ0IsRUFBWSxxQkFBcUI7SUFDakQsV0FBVyxFQUFpQixjQUFjO0lBQzFDLHFCQUFxQixFQUFPLHlCQUF5QjtJQUNyRCxlQUFlLEVBQWEsa0JBQWtCO0lBQzlDLGNBQWMsRUFBYyxpQkFBaUI7SUFDN0MscUJBQXFCLEVBQU8seUJBQXlCO0lBQ3JELG9CQUFvQixFQUFRLHlCQUF5QjtJQUNyRCwwQkFBMEIsRUFBRSw4QkFBOEI7SUFDMUQsMEJBQTBCLEVBQUUsK0JBQStCO0lBQzNELDBCQUEwQixFQUFFLCtCQUErQjtJQUMzRCxhQUFhLEVBQWUsZ0JBQWdCO0lBQzVDLFlBQVksRUFBZ0IsZUFBZTtJQUMzQyx1QkFBdUIsRUFBSyw2QkFBNkI7SUFDekQsY0FBYyxFQUFjLGlCQUFpQjtJQUM3QyxjQUFjLEVBQWMsa0JBQWtCO0lBQzlDLGtCQUFrQixFQUFVLHVCQUF1QjtJQUNuRCxzQkFBc0IsRUFBTSwyQkFBMkI7SUFDdkQsc0JBQXNCLEVBQU0sMkJBQTJCO0lBQ3ZELHlCQUF5QixFQUFHLDhCQUE4QjtJQUMxRCxZQUFZLEVBQWdCLGdCQUFnQjtJQUM1QyxrQkFBa0IsRUFBVSx1QkFBdUI7SUFDbkQsS0FBSyxFQUF1QixPQUFPO0lBQ25DLFNBQVMsRUFBbUIsV0FBVztJQUN2QyxPQUFPLEVBQXFCLFNBQVM7SUFDckMsUUFBUSxFQUFvQixXQUFXO0lBQ3ZDLGNBQWMsRUFBYyxpQkFBaUI7SUFDN0MsaUJBQWlCLEVBQVcsb0JBQW9CO0lBQ2hELHNCQUFzQixFQUFNLDBCQUEwQjtJQUN0RCxVQUFVLEVBQWtCLGFBQWE7Q0FDNUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFdBUk5JTkc6IHRoaXMgZmlsZSBpcyB1c2VkIGJ5IGJvdGggdGhlIGNsaWVudCBhbmQgdGhlIHNlcnZlci5cbi8vIERvIG5vdCB1c2UgYW55IGJyb3dzZXIgb3Igbm9kZS1zcGVjaWZpYyBBUEkhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjbGljazogICAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICByaWdodENsaWNrOiAgICAgICAgICAgICAgICAgJ3JpZ2h0LWNsaWNrJyxcbiAgICBkb3VibGVDbGljazogICAgICAgICAgICAgICAgJ2RvdWJsZS1jbGljaycsXG4gICAgZHJhZzogICAgICAgICAgICAgICAgICAgICAgICdkcmFnJyxcbiAgICBkcmFnVG9FbGVtZW50OiAgICAgICAgICAgICAgJ2RyYWctdG8tZWxlbWVudCcsXG4gICAgaG92ZXI6ICAgICAgICAgICAgICAgICAgICAgICdob3ZlcicsXG4gICAgdHlwZVRleHQ6ICAgICAgICAgICAgICAgICAgICd0eXBlLXRleHQnLFxuICAgIHNlbGVjdFRleHQ6ICAgICAgICAgICAgICAgICAnc2VsZWN0LXRleHQnLFxuICAgIHNlbGVjdFRleHRBcmVhQ29udGVudDogICAgICAnc2VsZWN0LXRleHQtYXJlYS1jb250ZW50JyxcbiAgICBzZWxlY3RFZGl0YWJsZUNvbnRlbnQ6ICAgICAgJ3NlbGVjdC1lZGl0YWJsZS1jb250ZW50JyxcbiAgICBwcmVzc0tleTogICAgICAgICAgICAgICAgICAgJ3ByZXNzLWtleScsXG4gICAgd2FpdDogICAgICAgICAgICAgICAgICAgICAgICd3YWl0JyxcbiAgICBuYXZpZ2F0ZVRvOiAgICAgICAgICAgICAgICAgJ25hdmlnYXRlLXRvJyxcbiAgICBzZXRGaWxlc1RvVXBsb2FkOiAgICAgICAgICAgJ3NldC1maWxlcy10by11cGxvYWQnLFxuICAgIGNsZWFyVXBsb2FkOiAgICAgICAgICAgICAgICAnY2xlYXItdXBsb2FkJyxcbiAgICBleGVjdXRlQ2xpZW50RnVuY3Rpb246ICAgICAgJ2V4ZWN1dGUtY2xpZW50LWZ1bmN0aW9uJyxcbiAgICBleGVjdXRlU2VsZWN0b3I6ICAgICAgICAgICAgJ2V4ZWN1dGUtc2VsZWN0b3InLFxuICAgIHRha2VTY3JlZW5zaG90OiAgICAgICAgICAgICAndGFrZS1zY3JlZW5zaG90JyxcbiAgICB0YWtlRWxlbWVudFNjcmVlbnNob3Q6ICAgICAgJ3Rha2UtZWxlbWVudC1zY3JlZW5zaG90JyxcbiAgICB0YWtlU2NyZWVuc2hvdE9uRmFpbDogICAgICAgJ3Rha2Utc2NyZWVuc2hvdC1vbi1mYWlsJyxcbiAgICBwcmVwYXJlQnJvd3Nlck1hbmlwdWxhdGlvbjogJ3ByZXBhcmUtYnJvd3Nlci1tYW5pcHVsYXRpb24nLFxuICAgIHNob3dBc3NlcnRpb25SZXRyaWVzU3RhdHVzOiAnc2hvdy1hc3NlcnRpb24tcmV0cmllcy1zdGF0dXMnLFxuICAgIGhpZGVBc3NlcnRpb25SZXRyaWVzU3RhdHVzOiAnaGlkZS1hc3NlcnRpb24tcmV0cmllcy1zdGF0dXMnLFxuICAgIHNldEJyZWFrcG9pbnQ6ICAgICAgICAgICAgICAnc2V0LWJyZWFrcG9pbnQnLFxuICAgIHJlc2l6ZVdpbmRvdzogICAgICAgICAgICAgICAncmVzaXplLXdpbmRvdycsXG4gICAgcmVzaXplV2luZG93VG9GaXREZXZpY2U6ICAgICdyZXNpemUtd2luZG93LXRvLWZpdC1kZXZpY2UnLFxuICAgIG1heGltaXplV2luZG93OiAgICAgICAgICAgICAnbWF4aW1pemUtd2luZG93JyxcbiAgICBzd2l0Y2hUb0lmcmFtZTogICAgICAgICAgICAgJ3N3aXRjaC10by1pZnJhbWUnLFxuICAgIHN3aXRjaFRvTWFpbldpbmRvdzogICAgICAgICAnc3dpdGNoLXRvLW1haW4td2luZG93JyxcbiAgICBzZXROYXRpdmVEaWFsb2dIYW5kbGVyOiAgICAgJ3NldC1uYXRpdmUtZGlhbG9nLWhhbmRsZXInLFxuICAgIGdldE5hdGl2ZURpYWxvZ0hpc3Rvcnk6ICAgICAnZ2V0LW5hdGl2ZS1kaWFsb2ctaGlzdG9yeScsXG4gICAgZ2V0QnJvd3NlckNvbnNvbGVNZXNzYWdlczogICdnZXQtYnJvd3Nlci1jb25zb2xlLW1lc3NhZ2VzJyxcbiAgICBzZXRUZXN0U3BlZWQ6ICAgICAgICAgICAgICAgJ3NldC10ZXN0LXNwZWVkJyxcbiAgICBzZXRQYWdlTG9hZFRpbWVvdXQ6ICAgICAgICAgJ3NldC1wYWdlLWxvYWQtdGltZW91dCcsXG4gICAgZGVidWc6ICAgICAgICAgICAgICAgICAgICAgICdkZWJ1ZycsXG4gICAgYXNzZXJ0aW9uOiAgICAgICAgICAgICAgICAgICdhc3NlcnRpb24nLFxuICAgIHVzZVJvbGU6ICAgICAgICAgICAgICAgICAgICAndXNlUm9sZScsXG4gICAgdGVzdERvbmU6ICAgICAgICAgICAgICAgICAgICd0ZXN0LWRvbmUnLFxuICAgIGJhY2t1cFN0b3JhZ2VzOiAgICAgICAgICAgICAnYmFja3VwLXN0b3JhZ2VzJyxcbiAgICBleGVjdXRlRXhwcmVzc2lvbjogICAgICAgICAgJ2V4ZWN1dGUtZXhwcmVzc2lvbicsXG4gICAgZXhlY3V0ZUFzeW5jRXhwcmVzc2lvbjogICAgICdleGVjdXRlLWFzeW5jLWV4cHJlc3Npb24nLFxuICAgIHVubG9ja1BhZ2U6ICAgICAgICAgICAgICAgICAndW5sb2NrLXBhZ2UnXG59O1xuIl19
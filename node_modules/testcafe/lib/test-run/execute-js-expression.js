"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vm_1 = require("vm");
const test_run_1 = require("../errors/test-run");
const execution_context_1 = require("../api/test-controller/execution-context");
const ERROR_LINE_COLUMN_REGEXP = /:(\d+):(\d+)/;
const ERROR_LINE_OFFSET = -1;
const ERROR_COLUMN_OFFSET = -4;
// NOTE: do not beautify this code since offsets for error lines and columns are coded here
function wrapInAsync(expression) {
    return '(async function() {\n' +
        expression + ';\n' +
        '});';
}
function getErrorLineColumn(err) {
    const result = err.stack.match(ERROR_LINE_COLUMN_REGEXP);
    const line = parseInt(result[1], 10);
    const column = parseInt(result[2], 10);
    return { line, column };
}
function formatExpression(expression) {
    const expresionMessage = expression.split('\n');
    return '[JS code]\n' + expresionMessage.map(str => {
        return ' '.repeat(10) + str;
    }).join('\n');
}
function createErrorFormattingOptions(expression) {
    return {
        filename: formatExpression(expression),
        lineOffset: ERROR_LINE_OFFSET,
        columnOffset: ERROR_COLUMN_OFFSET
    };
}
function getExecutionContext(testController, options = {}) {
    const context = testController.getExecutionContext();
    // TODO: Find a way to avoid this assignment
    execution_context_1.setContextOptions(context, options);
    return context;
}
function executeJsExpression(expression, testRun, options) {
    const context = getExecutionContext(testRun.controller, options);
    const errorOptions = createErrorFormattingOptions(expression);
    return vm_1.runInContext(expression, context, errorOptions);
}
exports.executeJsExpression = executeJsExpression;
async function executeAsyncJsExpression(expression, testRun, callsite) {
    const context = getExecutionContext(testRun.controller);
    const errorOptions = createErrorFormattingOptions(expression);
    try {
        return await vm_1.runInContext(wrapInAsync(expression), context, errorOptions)();
    }
    catch (err) {
        if (err.isTestCafeError)
            throw err;
        const { line, column } = getErrorLineColumn(err);
        throw new test_run_1.ExecuteAsyncExpressionError(err, expression, line, column, callsite);
    }
}
exports.executeAsyncJsExpression = executeAsyncJsExpression;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZS1qcy1leHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3QtcnVuL2V4ZWN1dGUtanMtZXhwcmVzc2lvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUFrQztBQUNsQyxpREFBaUU7QUFDakUsZ0ZBQTZFO0FBRTdFLE1BQU0sd0JBQXdCLEdBQUcsY0FBYyxDQUFDO0FBQ2hELE1BQU0saUJBQWlCLEdBQVUsQ0FBQyxDQUFDLENBQUM7QUFDcEMsTUFBTSxtQkFBbUIsR0FBUSxDQUFDLENBQUMsQ0FBQztBQUVwQywyRkFBMkY7QUFDM0YsU0FBUyxXQUFXLENBQUUsVUFBVTtJQUM1QixPQUFPLHVCQUF1QjtRQUN2QixVQUFVLEdBQUcsS0FBSztRQUNsQixLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELFNBQVMsa0JBQWtCLENBQUUsR0FBRztJQUM1QixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBRXpELE1BQU0sSUFBSSxHQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUV2QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQzVCLENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFFLFVBQVU7SUFDakMsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhELE9BQU8sYUFBYSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUM5QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQixDQUFDO0FBRUQsU0FBUyw0QkFBNEIsQ0FBRSxVQUFVO0lBQzdDLE9BQU87UUFDSCxRQUFRLEVBQU0sZ0JBQWdCLENBQUMsVUFBVSxDQUFDO1FBQzFDLFVBQVUsRUFBSSxpQkFBaUI7UUFDL0IsWUFBWSxFQUFFLG1CQUFtQjtLQUNwQyxDQUFDO0FBQ04sQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUUsY0FBYyxFQUFFLE9BQU8sR0FBRyxFQUFFO0lBQ3RELE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBRXJELDRDQUE0QztJQUM1QyxxQ0FBaUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFcEMsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUVELFNBQWdCLG1CQUFtQixDQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTztJQUM3RCxNQUFNLE9BQU8sR0FBUSxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RFLE1BQU0sWUFBWSxHQUFHLDRCQUE0QixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRTlELE9BQU8saUJBQVksQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFMRCxrREFLQztBQUVNLEtBQUssVUFBVSx3QkFBd0IsQ0FBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFFBQVE7SUFDekUsTUFBTSxPQUFPLEdBQVEsbUJBQW1CLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdELE1BQU0sWUFBWSxHQUFHLDRCQUE0QixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRTlELElBQUk7UUFDQSxPQUFPLE1BQU0saUJBQVksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUM7S0FDL0U7SUFDRCxPQUFPLEdBQUcsRUFBRTtRQUNSLElBQUksR0FBRyxDQUFDLGVBQWU7WUFDbkIsTUFBTSxHQUFHLENBQUM7UUFFZCxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpELE1BQU0sSUFBSSxzQ0FBMkIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDbEY7QUFDTCxDQUFDO0FBZkQsNERBZUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBydW5JbkNvbnRleHQgfSBmcm9tICd2bSc7XG5pbXBvcnQgeyBFeGVjdXRlQXN5bmNFeHByZXNzaW9uRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvdGVzdC1ydW4nO1xuaW1wb3J0IHsgc2V0Q29udGV4dE9wdGlvbnMgfSBmcm9tICcuLi9hcGkvdGVzdC1jb250cm9sbGVyL2V4ZWN1dGlvbi1jb250ZXh0JztcblxuY29uc3QgRVJST1JfTElORV9DT0xVTU5fUkVHRVhQID0gLzooXFxkKyk6KFxcZCspLztcbmNvbnN0IEVSUk9SX0xJTkVfT0ZGU0VUICAgICAgICA9IC0xO1xuY29uc3QgRVJST1JfQ09MVU1OX09GRlNFVCAgICAgID0gLTQ7XG5cbi8vIE5PVEU6IGRvIG5vdCBiZWF1dGlmeSB0aGlzIGNvZGUgc2luY2Ugb2Zmc2V0cyBmb3IgZXJyb3IgbGluZXMgYW5kIGNvbHVtbnMgYXJlIGNvZGVkIGhlcmVcbmZ1bmN0aW9uIHdyYXBJbkFzeW5jIChleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuICcoYXN5bmMgZnVuY3Rpb24oKSB7XFxuJyArXG4gICAgICAgICAgIGV4cHJlc3Npb24gKyAnO1xcbicgK1xuICAgICAgICAgICAnfSk7Jztcbn1cblxuZnVuY3Rpb24gZ2V0RXJyb3JMaW5lQ29sdW1uIChlcnIpIHtcbiAgICBjb25zdCByZXN1bHQgPSBlcnIuc3RhY2subWF0Y2goRVJST1JfTElORV9DT0xVTU5fUkVHRVhQKTtcblxuICAgIGNvbnN0IGxpbmUgICA9IHBhcnNlSW50KHJlc3VsdFsxXSwgMTApO1xuICAgIGNvbnN0IGNvbHVtbiA9IHBhcnNlSW50KHJlc3VsdFsyXSwgMTApO1xuXG4gICAgcmV0dXJuIHsgbGluZSwgY29sdW1uIH07XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEV4cHJlc3Npb24gKGV4cHJlc3Npb24pIHtcbiAgICBjb25zdCBleHByZXNpb25NZXNzYWdlID0gZXhwcmVzc2lvbi5zcGxpdCgnXFxuJyk7XG5cbiAgICByZXR1cm4gJ1tKUyBjb2RlXVxcbicgKyBleHByZXNpb25NZXNzYWdlLm1hcChzdHIgPT4ge1xuICAgICAgICByZXR1cm4gJyAnLnJlcGVhdCgxMCkgKyBzdHI7XG4gICAgfSkuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yRm9ybWF0dGluZ09wdGlvbnMgKGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmaWxlbmFtZTogICAgIGZvcm1hdEV4cHJlc3Npb24oZXhwcmVzc2lvbiksXG4gICAgICAgIGxpbmVPZmZzZXQ6ICAgRVJST1JfTElORV9PRkZTRVQsXG4gICAgICAgIGNvbHVtbk9mZnNldDogRVJST1JfQ09MVU1OX09GRlNFVFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldEV4ZWN1dGlvbkNvbnRleHQgKHRlc3RDb250cm9sbGVyLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBjb250ZXh0ID0gdGVzdENvbnRyb2xsZXIuZ2V0RXhlY3V0aW9uQ29udGV4dCgpO1xuXG4gICAgLy8gVE9ETzogRmluZCBhIHdheSB0byBhdm9pZCB0aGlzIGFzc2lnbm1lbnRcbiAgICBzZXRDb250ZXh0T3B0aW9ucyhjb250ZXh0LCBvcHRpb25zKTtcblxuICAgIHJldHVybiBjb250ZXh0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhlY3V0ZUpzRXhwcmVzc2lvbiAoZXhwcmVzc2lvbiwgdGVzdFJ1biwgb3B0aW9ucykge1xuICAgIGNvbnN0IGNvbnRleHQgICAgICA9IGdldEV4ZWN1dGlvbkNvbnRleHQodGVzdFJ1bi5jb250cm9sbGVyLCBvcHRpb25zKTtcbiAgICBjb25zdCBlcnJvck9wdGlvbnMgPSBjcmVhdGVFcnJvckZvcm1hdHRpbmdPcHRpb25zKGV4cHJlc3Npb24pO1xuXG4gICAgcmV0dXJuIHJ1bkluQ29udGV4dChleHByZXNzaW9uLCBjb250ZXh0LCBlcnJvck9wdGlvbnMpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUFzeW5jSnNFeHByZXNzaW9uIChleHByZXNzaW9uLCB0ZXN0UnVuLCBjYWxsc2l0ZSkge1xuICAgIGNvbnN0IGNvbnRleHQgICAgICA9IGdldEV4ZWN1dGlvbkNvbnRleHQodGVzdFJ1bi5jb250cm9sbGVyKTtcbiAgICBjb25zdCBlcnJvck9wdGlvbnMgPSBjcmVhdGVFcnJvckZvcm1hdHRpbmdPcHRpb25zKGV4cHJlc3Npb24pO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJ1bkluQ29udGV4dCh3cmFwSW5Bc3luYyhleHByZXNzaW9uKSwgY29udGV4dCwgZXJyb3JPcHRpb25zKSgpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIuaXNUZXN0Q2FmZUVycm9yKVxuICAgICAgICAgICAgdGhyb3cgZXJyO1xuXG4gICAgICAgIGNvbnN0IHsgbGluZSwgY29sdW1uIH0gPSBnZXRFcnJvckxpbmVDb2x1bW4oZXJyKTtcblxuICAgICAgICB0aHJvdyBuZXcgRXhlY3V0ZUFzeW5jRXhwcmVzc2lvbkVycm9yKGVyciwgZXhwcmVzc2lvbiwgbGluZSwgY29sdW1uLCBjYWxsc2l0ZSk7XG4gICAgfVxufVxuIl19
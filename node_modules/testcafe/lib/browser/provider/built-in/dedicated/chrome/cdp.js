"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const chrome_remote_interface_1 = __importDefault(require("chrome-remote-interface"));
const client_functions_1 = require("../../../utils/client-functions");
const DOWNLOADS_DIR = path_1.default.join(os_1.default.homedir(), 'Downloads');
async function getActiveTab(cdpPort, browserId) {
    const tabs = await chrome_remote_interface_1.default.listTabs({ port: cdpPort });
    return tabs.filter(t => t.type === 'page' && t.url.includes(browserId))[0];
}
async function setEmulationBounds({ client, config, viewportSize, emulatedDevicePixelRatio }) {
    await client.Emulation.setDeviceMetricsOverride({
        width: viewportSize.width,
        height: viewportSize.height,
        deviceScaleFactor: emulatedDevicePixelRatio,
        mobile: config.mobile,
        // @ts-ignore Specify this property for backward compatibility with older protocol versions
        fitWindow: false
    });
    await client.Emulation.setVisibleSize({ width: viewportSize.width, height: viewportSize.height });
}
async function setEmulation(runtimeInfo) {
    const { client, config } = runtimeInfo;
    if (config.userAgent !== void 0)
        await client.Network.setUserAgentOverride({ userAgent: config.userAgent });
    if (config.touch !== void 0) {
        const touchConfig = {
            enabled: config.touch,
            configuration: config.mobile ? 'mobile' : 'desktop',
            maxTouchPoints: 1
        };
        if (client.Emulation.setEmitTouchEventsForMouse)
            await client.Emulation.setEmitTouchEventsForMouse(touchConfig);
        if (client.Emulation.setTouchEmulationEnabled)
            await client.Emulation.setTouchEmulationEnabled(touchConfig);
    }
    await resizeWindow({ width: config.width, height: config.height }, runtimeInfo);
}
async function enableDownloads({ client }) {
    await client.Page.setDownloadBehavior({
        behavior: 'allow',
        downloadPath: DOWNLOADS_DIR
    });
}
async function getScreenshotData({ client }) {
    const screenshotData = await client.Page.captureScreenshot({});
    return Buffer.from(screenshotData.data, 'base64');
}
exports.getScreenshotData = getScreenshotData;
async function createClient(runtimeInfo) {
    const { browserId, config, cdpPort } = runtimeInfo;
    let tab = null;
    let client = null;
    try {
        tab = await getActiveTab(cdpPort, browserId);
        if (!tab)
            return;
        client = await chrome_remote_interface_1.default({ target: tab, port: cdpPort });
    }
    catch (e) {
        return;
    }
    runtimeInfo.tab = tab;
    runtimeInfo.client = client;
    await client.Page.enable();
    await client.Network.enable({});
    await client.Runtime.enable();
    const devicePixelRatioQueryResult = await client.Runtime.evaluate({ expression: 'window.devicePixelRatio' });
    runtimeInfo.originalDevicePixelRatio = devicePixelRatioQueryResult.result.value;
    runtimeInfo.emulatedDevicePixelRatio = config.scaleFactor || runtimeInfo.originalDevicePixelRatio;
    if (config.emulation)
        await setEmulation(runtimeInfo);
    if (config.headless)
        await enableDownloads(runtimeInfo);
}
exports.createClient = createClient;
function isHeadlessTab({ tab, config }) {
    return tab && config.headless;
}
exports.isHeadlessTab = isHeadlessTab;
async function closeTab({ tab, cdpPort }) {
    await chrome_remote_interface_1.default.closeTab({ id: tab.id, port: cdpPort });
}
exports.closeTab = closeTab;
async function updateMobileViewportSize(runtimeInfo) {
    const windowDimensionsQueryResult = await runtimeInfo.client.Runtime.evaluate({
        expression: `(${client_functions_1.GET_WINDOW_DIMENSIONS_INFO_SCRIPT})()`,
        returnByValue: true
    });
    const windowDimensions = windowDimensionsQueryResult.result.value;
    runtimeInfo.viewportSize.width = windowDimensions.outerWidth;
    runtimeInfo.viewportSize.height = windowDimensions.outerHeight;
}
exports.updateMobileViewportSize = updateMobileViewportSize;
async function resizeWindow(newDimensions, runtimeInfo) {
    const { browserId, config, viewportSize, providerMethods } = runtimeInfo;
    const currentWidth = viewportSize.width;
    const currentHeight = viewportSize.height;
    const newWidth = newDimensions.width || currentWidth;
    const newHeight = newDimensions.height || currentHeight;
    if (!config.headless)
        await providerMethods.resizeLocalBrowserWindow(browserId, newWidth, newHeight, currentWidth, currentHeight);
    viewportSize.width = newWidth;
    viewportSize.height = newHeight;
    if (config.emulation)
        await setEmulationBounds(runtimeInfo);
}
exports.resizeWindow = resizeWindow;
//# sourceMappingURL=data:application/json;base64,
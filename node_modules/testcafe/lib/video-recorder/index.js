"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const path_1 = require("path");
const fs_1 = __importDefault(require("fs"));
const child_process_1 = require("child_process");
const make_dir_1 = __importDefault(require("make-dir"));
const temp_directory_1 = __importDefault(require("../utils/temp-directory"));
const path_pattern_1 = __importDefault(require("../utils/path-pattern"));
const warning_message_1 = __importDefault(require("../notifications/warning-message"));
const string_1 = require("../utils/string");
const test_run_video_recorder_1 = __importDefault(require("./test-run-video-recorder"));
const DEBUG_LOGGER = debug_1.default('testcafe:video-recorder');
const VIDEO_EXTENSION = 'mp4';
const TEMP_DIR_PREFIX = 'video';
class VideoRecorder {
    constructor(browserJob, basePath, opts, encodingOpts, warningLog) {
        this.browserJob = browserJob;
        this.basePath = basePath;
        this.failedOnly = opts.failedOnly;
        this.singleFile = opts.singleFile;
        this.ffmpegPath = opts.ffmpegPath;
        this.customPathPattern = opts.pathPattern;
        this.timeStamp = opts.timeStamp;
        this.encodingOptions = encodingOpts;
        this.warningLog = warningLog;
        this.tempDirectory = new temp_directory_1.default(TEMP_DIR_PREFIX);
        this.firstFile = true;
        this.testRunVideoRecorders = {};
        this._assignEventHandlers(browserJob);
    }
    _createSafeListener(listener) {
        return async (...args) => {
            try {
                return await listener.apply(this, args);
            }
            catch (error) {
                DEBUG_LOGGER(listener && listener.name, error);
                return void 0;
            }
        };
    }
    _assignEventHandlers(browserJob) {
        browserJob.once('start', this._createSafeListener(() => {
            this.tempDirectoryInitializedPromise = this._onBrowserJobStart();
            return this.tempDirectoryInitializedPromise;
        }));
        browserJob.once('done', this._createSafeListener(this._onBrowserJobDone));
        browserJob.on('test-run-create', this._createSafeListener(this._onTestRunCreate));
        browserJob.on('test-run-ready', this._createSafeListener(this._onTestRunReady));
        browserJob.on('test-run-before-done', this._createSafeListener(this._onTestRunBeforeDone));
    }
    _addProblematicPlaceholdersWarning(placeholders) {
        const problematicPlaceholderListStr = string_1.getConcatenatedValuesString(placeholders);
        const suffix = string_1.getPluralSuffix(placeholders);
        const verb = string_1.getToBeInPastTense(placeholders);
        this.warningLog.addWarning(warning_message_1.default.problematicPathPatternPlaceholderForVideoRecording, problematicPlaceholderListStr, suffix, suffix, verb);
    }
    _getTargetVideoPath(testRunRecorder) {
        const data = Object.assign(testRunRecorder.testRunInfo, { now: this.timeStamp });
        if (this.singleFile) {
            data.testIndex = null;
            data.fixture = null;
            data.test = null;
        }
        const pathPattern = new path_pattern_1.default(this.customPathPattern, VIDEO_EXTENSION, data);
        pathPattern.on('problematic-placeholders-found', ({ placeholders }) => this._addProblematicPlaceholdersWarning(placeholders));
        return path_1.join(this.basePath, pathPattern.getPath());
    }
    _concatVideo(targetVideoPath, { tempVideoPath, tempMergeConfigPath, tmpMergeName }) {
        if (this.firstFile) {
            this.firstFile = false;
            return;
        }
        fs_1.default.writeFileSync(tempMergeConfigPath, `
            file '${targetVideoPath}'
            file '${tempVideoPath}'
        `);
        child_process_1.spawnSync(this.ffmpegPath, ['-y', '-f', 'concat', '-safe', '0', '-i', tempMergeConfigPath, '-c', 'copy', tmpMergeName], { stdio: 'ignore' });
        fs_1.default.copyFileSync(tmpMergeName, tempVideoPath);
    }
    async _onBrowserJobStart() {
        await this.tempDirectory.init();
    }
    async _onBrowserJobDone() {
        await this.tempDirectory.dispose();
    }
    async _onTestRunCreate(testRunInfo) {
        if (testRunInfo.legacy)
            return;
        await this.tempDirectoryInitializedPromise;
        const recordingOptions = {
            path: this.tempDirectory.path,
            ffmpegPath: this.ffmpegPath,
            encodingOptions: this.encodingOptions
        };
        const testRunVideoRecorder = this._createTestRunVideoRecorder(testRunInfo, recordingOptions);
        const isVideoSupported = await testRunVideoRecorder.isVideoSupported();
        if (isVideoSupported) {
            await testRunVideoRecorder.init();
            this.testRunVideoRecorders[testRunVideoRecorder.index] = testRunVideoRecorder;
        }
        else
            this.warningLog.addWarning(warning_message_1.default.videoNotSupportedByBrowser, testRunVideoRecorder.testRunInfo.alias);
    }
    _createTestRunVideoRecorder(testRunInfo, recordingOptions) {
        return new test_run_video_recorder_1.default(testRunInfo, recordingOptions, this.warningLog);
    }
    async _onTestRunReady({ index }) {
        const testRunRecorder = this.testRunVideoRecorders[index];
        if (!testRunRecorder)
            return;
        await testRunRecorder.startCapturing();
    }
    async _onTestRunBeforeDone({ index }) {
        const testRunRecorder = this.testRunVideoRecorders[index];
        if (!testRunRecorder)
            return;
        delete this.testRunVideoRecorders[index];
        await testRunRecorder.finishCapturing();
        if (this.failedOnly && !testRunRecorder.hasErrors)
            return;
        await this._saveFiles(testRunRecorder);
    }
    async _saveFiles(testRunRecorder) {
        const videoPath = this._getTargetVideoPath(testRunRecorder);
        await make_dir_1.default(path_1.dirname(videoPath));
        if (this.singleFile)
            this._concatVideo(videoPath, testRunRecorder.tempFiles);
        fs_1.default.copyFileSync(testRunRecorder.tempFiles.tempVideoPath, videoPath);
    }
}
exports.default = VideoRecorder;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,
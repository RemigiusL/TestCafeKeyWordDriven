"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    screenshotsPathNotSpecified: 'Was unable to take screenshots because the screenshot directory is not specified. To specify it, use the "-s" or "--screenshots" command line option or the "screenshots" method of the test runner in case you are using API.',
    screenshotError: 'Was unable to take a screenshot due to an error.\n\n{errMessage}',
    screenshotMarkNotFound: 'Unable to locate the page area in the browser window screenshot at {screenshotPath}, because the page area mark with ID {markId} is not found in the screenshot.',
    screenshotRewritingError: 'The file at "{screenshotPath}" already exists. It has just been rewritten with a recent screenshot. This situation can possibly cause issues. To avoid them, make sure that each screenshot has a unique path. If a test runs in multiple browsers, consider including the user agent in the screenshot path or generate a unique identifier in another way.',
    browserManipulationsOnRemoteBrowser: 'The screenshot and window resize functionalities are not supported in a remote browser. They can function only if the browser is running on the same machine and in the same environment as the TestCafe server.',
    screenshotNotSupportedByBrowserProvider: 'The screenshot functionality is not supported by the "{providerName}" browser provider.',
    videoNotSupportedByBrowser: 'Video recording is not supported by the "{browserAlias}" browser.',
    videoBrowserResizing: 'The browser window was resized during the "{testName}" test while TestCafe recorded a video. TestCafe cannot adjust the video resolution during recording. As a result, the video content may appear broken. Do not resize the browser window when TestCafe records a video.',
    resizeNotSupportedByBrowserProvider: 'The window resize functionality is not supported by the "{providerName}" browser provider.',
    maximizeNotSupportedByBrowserProvider: 'The window maximization functionality is not supported by the "{providerName}" browser provider.',
    resizeError: 'Was unable to resize the window due to an error.\n\n{errMessage}',
    maximizeError: 'Was unable to maximize the window due to an error.\n\n{errMessage}',
    requestMockCORSValidationFailed: '{RequestHook}: CORS validation failed for a request specified as {requestFilterRule}',
    debugInHeadlessError: 'You cannot debug in headless mode.',
    cannotReadConfigFile: 'An error has occurred while reading the configuration file.',
    cannotParseConfigFile: "Failed to parse the '.testcaferc.json' file.\n\nThis file is not a well-formed JSON file.",
    configOptionsWereOverriden: 'The {optionsString} option{suffix} from the configuration file will be ignored.',
    cannotOverrideTypeScriptConfigOptions: 'You cannot override the "{optionName}" compiler option in the TypeScript configuration file.',
    cannotFindSSLCertFile: 'Unable to find the "{path}" file, specified by the "{option}" ssl option. Error details:\n' +
        '\n' +
        '{err}',
    cannotFindConfigurationFile: 'Unable to find the "{path}" configuration file. Error details:\n' +
        '\n' +
        '{err}',
    problematicPathPatternPlaceholderForVideoRecording: 'The {placeholderList} path pattern placeholder{suffix} cannot be applied to the recorded video.\n' +
        '\n' +
        'The placeholder{suffix} {verb} replaced with an empty string.',
    clientScriptsWithEmptyContent: 'The client script you tried to inject is empty.',
    clientScriptsWithDuplicatedContent: 'You injected the following client script{suffix} several times:\n {duplicatedScripts}'
};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybmluZy1tZXNzYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGlmaWNhdGlvbnMvd2FybmluZy1tZXNzYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0JBQWU7SUFDWCwyQkFBMkIsRUFBYyxnT0FBZ087SUFDelEsZUFBZSxFQUEwQixrRUFBa0U7SUFDM0csc0JBQXNCLEVBQW1CLGtLQUFrSztJQUMzTSx3QkFBd0IsRUFBaUIsOFZBQThWO0lBQ3ZZLG1DQUFtQyxFQUFNLGtOQUFrTjtJQUMzUCx1Q0FBdUMsRUFBRSx5RkFBeUY7SUFDbEksMEJBQTBCLEVBQWUsbUVBQW1FO0lBQzVHLG9CQUFvQixFQUFxQiw4UUFBOFE7SUFDdlQsbUNBQW1DLEVBQU0sNEZBQTRGO0lBQ3JJLHFDQUFxQyxFQUFJLGtHQUFrRztJQUMzSSxXQUFXLEVBQThCLGtFQUFrRTtJQUMzRyxhQUFhLEVBQTRCLG9FQUFvRTtJQUM3RywrQkFBK0IsRUFBVSxzRkFBc0Y7SUFDL0gsb0JBQW9CLEVBQXFCLG9DQUFvQztJQUM3RSxvQkFBb0IsRUFBcUIsNkRBQTZEO0lBQ3RHLHFCQUFxQixFQUFvQiwyRkFBMkY7SUFDcEksMEJBQTBCLEVBQWUsaUZBQWlGO0lBQzFILHFDQUFxQyxFQUFJLDhGQUE4RjtJQUV2SSxxQkFBcUIsRUFBRSw0RkFBNEY7UUFDNUYsSUFBSTtRQUNKLE9BQU87SUFFOUIsMkJBQTJCLEVBQUUsa0VBQWtFO1FBQ2xFLElBQUk7UUFDSixPQUFPO0lBRXBDLGtEQUFrRCxFQUFFLG1HQUFtRztRQUNuRyxJQUFJO1FBQ0osK0RBQStEO0lBRW5ILDZCQUE2QixFQUFPLGlEQUFpRDtJQUNyRixrQ0FBa0MsRUFBRSx1RkFBdUY7Q0FDOUgsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBzY3JlZW5zaG90c1BhdGhOb3RTcGVjaWZpZWQ6ICAgICAgICAgICAgICdXYXMgdW5hYmxlIHRvIHRha2Ugc2NyZWVuc2hvdHMgYmVjYXVzZSB0aGUgc2NyZWVuc2hvdCBkaXJlY3RvcnkgaXMgbm90IHNwZWNpZmllZC4gVG8gc3BlY2lmeSBpdCwgdXNlIHRoZSBcIi1zXCIgb3IgXCItLXNjcmVlbnNob3RzXCIgY29tbWFuZCBsaW5lIG9wdGlvbiBvciB0aGUgXCJzY3JlZW5zaG90c1wiIG1ldGhvZCBvZiB0aGUgdGVzdCBydW5uZXIgaW4gY2FzZSB5b3UgYXJlIHVzaW5nIEFQSS4nLFxuICAgIHNjcmVlbnNob3RFcnJvcjogICAgICAgICAgICAgICAgICAgICAgICAgJ1dhcyB1bmFibGUgdG8gdGFrZSBhIHNjcmVlbnNob3QgZHVlIHRvIGFuIGVycm9yLlxcblxcbntlcnJNZXNzYWdlfScsXG4gICAgc2NyZWVuc2hvdE1hcmtOb3RGb3VuZDogICAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGxvY2F0ZSB0aGUgcGFnZSBhcmVhIGluIHRoZSBicm93c2VyIHdpbmRvdyBzY3JlZW5zaG90IGF0IHtzY3JlZW5zaG90UGF0aH0sIGJlY2F1c2UgdGhlIHBhZ2UgYXJlYSBtYXJrIHdpdGggSUQge21hcmtJZH0gaXMgbm90IGZvdW5kIGluIHRoZSBzY3JlZW5zaG90LicsXG4gICAgc2NyZWVuc2hvdFJld3JpdGluZ0Vycm9yOiAgICAgICAgICAgICAgICAnVGhlIGZpbGUgYXQgXCJ7c2NyZWVuc2hvdFBhdGh9XCIgYWxyZWFkeSBleGlzdHMuIEl0IGhhcyBqdXN0IGJlZW4gcmV3cml0dGVuIHdpdGggYSByZWNlbnQgc2NyZWVuc2hvdC4gVGhpcyBzaXR1YXRpb24gY2FuIHBvc3NpYmx5IGNhdXNlIGlzc3Vlcy4gVG8gYXZvaWQgdGhlbSwgbWFrZSBzdXJlIHRoYXQgZWFjaCBzY3JlZW5zaG90IGhhcyBhIHVuaXF1ZSBwYXRoLiBJZiBhIHRlc3QgcnVucyBpbiBtdWx0aXBsZSBicm93c2VycywgY29uc2lkZXIgaW5jbHVkaW5nIHRoZSB1c2VyIGFnZW50IGluIHRoZSBzY3JlZW5zaG90IHBhdGggb3IgZ2VuZXJhdGUgYSB1bmlxdWUgaWRlbnRpZmllciBpbiBhbm90aGVyIHdheS4nLFxuICAgIGJyb3dzZXJNYW5pcHVsYXRpb25zT25SZW1vdGVCcm93c2VyOiAgICAgJ1RoZSBzY3JlZW5zaG90IGFuZCB3aW5kb3cgcmVzaXplIGZ1bmN0aW9uYWxpdGllcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBhIHJlbW90ZSBicm93c2VyLiBUaGV5IGNhbiBmdW5jdGlvbiBvbmx5IGlmIHRoZSBicm93c2VyIGlzIHJ1bm5pbmcgb24gdGhlIHNhbWUgbWFjaGluZSBhbmQgaW4gdGhlIHNhbWUgZW52aXJvbm1lbnQgYXMgdGhlIFRlc3RDYWZlIHNlcnZlci4nLFxuICAgIHNjcmVlbnNob3ROb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlcjogJ1RoZSBzY3JlZW5zaG90IGZ1bmN0aW9uYWxpdHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgXCJ7cHJvdmlkZXJOYW1lfVwiIGJyb3dzZXIgcHJvdmlkZXIuJyxcbiAgICB2aWRlb05vdFN1cHBvcnRlZEJ5QnJvd3NlcjogICAgICAgICAgICAgICdWaWRlbyByZWNvcmRpbmcgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgXCJ7YnJvd3NlckFsaWFzfVwiIGJyb3dzZXIuJyxcbiAgICB2aWRlb0Jyb3dzZXJSZXNpemluZzogICAgICAgICAgICAgICAgICAgICdUaGUgYnJvd3NlciB3aW5kb3cgd2FzIHJlc2l6ZWQgZHVyaW5nIHRoZSBcInt0ZXN0TmFtZX1cIiB0ZXN0IHdoaWxlIFRlc3RDYWZlIHJlY29yZGVkIGEgdmlkZW8uIFRlc3RDYWZlIGNhbm5vdCBhZGp1c3QgdGhlIHZpZGVvIHJlc29sdXRpb24gZHVyaW5nIHJlY29yZGluZy4gQXMgYSByZXN1bHQsIHRoZSB2aWRlbyBjb250ZW50IG1heSBhcHBlYXIgYnJva2VuLiBEbyBub3QgcmVzaXplIHRoZSBicm93c2VyIHdpbmRvdyB3aGVuIFRlc3RDYWZlIHJlY29yZHMgYSB2aWRlby4nLFxuICAgIHJlc2l6ZU5vdFN1cHBvcnRlZEJ5QnJvd3NlclByb3ZpZGVyOiAgICAgJ1RoZSB3aW5kb3cgcmVzaXplIGZ1bmN0aW9uYWxpdHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgXCJ7cHJvdmlkZXJOYW1lfVwiIGJyb3dzZXIgcHJvdmlkZXIuJyxcbiAgICBtYXhpbWl6ZU5vdFN1cHBvcnRlZEJ5QnJvd3NlclByb3ZpZGVyOiAgICdUaGUgd2luZG93IG1heGltaXphdGlvbiBmdW5jdGlvbmFsaXR5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie3Byb3ZpZGVyTmFtZX1cIiBicm93c2VyIHByb3ZpZGVyLicsXG4gICAgcmVzaXplRXJyb3I6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV2FzIHVuYWJsZSB0byByZXNpemUgdGhlIHdpbmRvdyBkdWUgdG8gYW4gZXJyb3IuXFxuXFxue2Vyck1lc3NhZ2V9JyxcbiAgICBtYXhpbWl6ZUVycm9yOiAgICAgICAgICAgICAgICAgICAgICAgICAgICdXYXMgdW5hYmxlIHRvIG1heGltaXplIHRoZSB3aW5kb3cgZHVlIHRvIGFuIGVycm9yLlxcblxcbntlcnJNZXNzYWdlfScsXG4gICAgcmVxdWVzdE1vY2tDT1JTVmFsaWRhdGlvbkZhaWxlZDogICAgICAgICAne1JlcXVlc3RIb29rfTogQ09SUyB2YWxpZGF0aW9uIGZhaWxlZCBmb3IgYSByZXF1ZXN0IHNwZWNpZmllZCBhcyB7cmVxdWVzdEZpbHRlclJ1bGV9JyxcbiAgICBkZWJ1Z0luSGVhZGxlc3NFcnJvcjogICAgICAgICAgICAgICAgICAgICdZb3UgY2Fubm90IGRlYnVnIGluIGhlYWRsZXNzIG1vZGUuJyxcbiAgICBjYW5ub3RSZWFkQ29uZmlnRmlsZTogICAgICAgICAgICAgICAgICAgICdBbiBlcnJvciBoYXMgb2NjdXJyZWQgd2hpbGUgcmVhZGluZyB0aGUgY29uZmlndXJhdGlvbiBmaWxlLicsXG4gICAgY2Fubm90UGFyc2VDb25maWdGaWxlOiAgICAgICAgICAgICAgICAgICBcIkZhaWxlZCB0byBwYXJzZSB0aGUgJy50ZXN0Y2FmZXJjLmpzb24nIGZpbGUuXFxuXFxuVGhpcyBmaWxlIGlzIG5vdCBhIHdlbGwtZm9ybWVkIEpTT04gZmlsZS5cIixcbiAgICBjb25maWdPcHRpb25zV2VyZU92ZXJyaWRlbjogICAgICAgICAgICAgICdUaGUge29wdGlvbnNTdHJpbmd9IG9wdGlvbntzdWZmaXh9IGZyb20gdGhlIGNvbmZpZ3VyYXRpb24gZmlsZSB3aWxsIGJlIGlnbm9yZWQuJyxcbiAgICBjYW5ub3RPdmVycmlkZVR5cGVTY3JpcHRDb25maWdPcHRpb25zOiAgICdZb3UgY2Fubm90IG92ZXJyaWRlIHRoZSBcIntvcHRpb25OYW1lfVwiIGNvbXBpbGVyIG9wdGlvbiBpbiB0aGUgVHlwZVNjcmlwdCBjb25maWd1cmF0aW9uIGZpbGUuJyxcblxuICAgIGNhbm5vdEZpbmRTU0xDZXJ0RmlsZTogJ1VuYWJsZSB0byBmaW5kIHRoZSBcIntwYXRofVwiIGZpbGUsIHNwZWNpZmllZCBieSB0aGUgXCJ7b3B0aW9ufVwiIHNzbCBvcHRpb24uIEVycm9yIGRldGFpbHM6XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAne2Vycn0nLFxuXG4gICAgY2Fubm90RmluZENvbmZpZ3VyYXRpb25GaWxlOiAnVW5hYmxlIHRvIGZpbmQgdGhlIFwie3BhdGh9XCIgY29uZmlndXJhdGlvbiBmaWxlLiBFcnJvciBkZXRhaWxzOlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3tlcnJ9JyxcblxuICAgIHByb2JsZW1hdGljUGF0aFBhdHRlcm5QbGFjZWhvbGRlckZvclZpZGVvUmVjb3JkaW5nOiAnVGhlIHtwbGFjZWhvbGRlckxpc3R9IHBhdGggcGF0dGVybiBwbGFjZWhvbGRlcntzdWZmaXh9IGNhbm5vdCBiZSBhcHBsaWVkIHRvIHRoZSByZWNvcmRlZCB2aWRlby5cXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVGhlIHBsYWNlaG9sZGVye3N1ZmZpeH0ge3ZlcmJ9IHJlcGxhY2VkIHdpdGggYW4gZW1wdHkgc3RyaW5nLicsXG5cbiAgICBjbGllbnRTY3JpcHRzV2l0aEVtcHR5Q29udGVudDogICAgICAnVGhlIGNsaWVudCBzY3JpcHQgeW91IHRyaWVkIHRvIGluamVjdCBpcyBlbXB0eS4nLFxuICAgIGNsaWVudFNjcmlwdHNXaXRoRHVwbGljYXRlZENvbnRlbnQ6ICdZb3UgaW5qZWN0ZWQgdGhlIGZvbGxvd2luZyBjbGllbnQgc2NyaXB0e3N1ZmZpeH0gc2V2ZXJhbCB0aW1lczpcXG4ge2R1cGxpY2F0ZWRTY3JpcHRzfSdcbn07XG5cbiJdfQ==
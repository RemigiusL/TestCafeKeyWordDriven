"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const convert_to_best_fit_type_1 = __importDefault(require("../convert-to-best-fit-type"));
const DEFAULT_OPTIONS_SEPARATOR = ',';
const DEFAULT_KEY_VALUE_SEPARATOR = '=';
function convertOptionValueType(value) {
    // NOTE: threat a key without a separator and a value as a boolean flag
    if (value === void 0)
        return true;
    return convert_to_best_fit_type_1.default(value);
}
function parseOptionsString(optionsStr, optionsSeparator, keyValueSeparator) {
    return optionsStr
        .split(optionsSeparator)
        .map(keyValueString => keyValueString.split(keyValueSeparator))
        .map(([key, ...value]) => [key, value.length > 1 ? value.join(keyValueSeparator) : value[0]]);
}
async function default_1(sourceOptions = '', optionsConfig) {
    const { optionsSeparator = DEFAULT_OPTIONS_SEPARATOR, keyValueSeparator = DEFAULT_KEY_VALUE_SEPARATOR, skipOptionValueTypeConversion = false, onOptionParsed = void 0, } = optionsConfig;
    const optionsList = typeof sourceOptions === 'string' ?
        parseOptionsString(sourceOptions, optionsSeparator, keyValueSeparator) :
        Object.entries(sourceOptions);
    const resultOptions = {};
    await Promise.all(optionsList.map(async ([key, value]) => {
        if (!skipOptionValueTypeConversion)
            value = convertOptionValueType(value);
        if (onOptionParsed)
            value = await onOptionParsed(key, value);
        resultOptions[key] = value;
    }));
    return resultOptions;
}
exports.default = default_1;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9nZXQtb3B0aW9ucy9iYXNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkZBQStEO0FBRS9ELE1BQU0seUJBQXlCLEdBQUssR0FBRyxDQUFDO0FBQ3hDLE1BQU0sMkJBQTJCLEdBQUcsR0FBRyxDQUFDO0FBR3hDLFNBQVMsc0JBQXNCLENBQUUsS0FBSztJQUNsQyx1RUFBdUU7SUFDdkUsSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDO1FBQ2hCLE9BQU8sSUFBSSxDQUFDO0lBRWhCLE9BQU8sa0NBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELFNBQVMsa0JBQWtCLENBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQjtJQUN4RSxPQUFPLFVBQVU7U0FDWixLQUFLLENBQUMsZ0JBQWdCLENBQUM7U0FDdkIsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQzlELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEcsQ0FBQztBQUVjLEtBQUssb0JBQVcsYUFBYSxHQUFHLEVBQUUsRUFBRSxhQUFhO0lBQzVELE1BQU0sRUFDRixnQkFBZ0IsR0FBRyx5QkFBeUIsRUFDNUMsaUJBQWlCLEdBQUcsMkJBQTJCLEVBQy9DLDZCQUE2QixHQUFHLEtBQUssRUFDckMsY0FBYyxHQUFHLEtBQUssQ0FBQyxHQUMxQixHQUFHLGFBQWEsQ0FBQztJQUVsQixNQUFNLFdBQVcsR0FBRyxPQUFPLGFBQWEsS0FBSyxRQUFRLENBQUMsQ0FBQztRQUNuRCxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFbEMsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDO0lBRXpCLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1FBQ3JELElBQUksQ0FBQyw2QkFBNkI7WUFDOUIsS0FBSyxHQUFHLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTFDLElBQUksY0FBYztZQUNkLEtBQUssR0FBRyxNQUFNLGNBQWMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFN0MsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRUosT0FBTyxhQUFhLENBQUM7QUFDekIsQ0FBQztBQXpCRCw0QkF5QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29udmVydFRvQmVzdEZpdFR5cGUgZnJvbSAnLi4vY29udmVydC10by1iZXN0LWZpdC10eXBlJztcblxuY29uc3QgREVGQVVMVF9PUFRJT05TX1NFUEFSQVRPUiAgID0gJywnO1xuY29uc3QgREVGQVVMVF9LRVlfVkFMVUVfU0VQQVJBVE9SID0gJz0nO1xuXG5cbmZ1bmN0aW9uIGNvbnZlcnRPcHRpb25WYWx1ZVR5cGUgKHZhbHVlKSB7XG4gICAgLy8gTk9URTogdGhyZWF0IGEga2V5IHdpdGhvdXQgYSBzZXBhcmF0b3IgYW5kIGEgdmFsdWUgYXMgYSBib29sZWFuIGZsYWdcbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMClcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICByZXR1cm4gY29udmVydFRvQmVzdEZpdFR5cGUodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZU9wdGlvbnNTdHJpbmcgKG9wdGlvbnNTdHIsIG9wdGlvbnNTZXBhcmF0b3IsIGtleVZhbHVlU2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIG9wdGlvbnNTdHJcbiAgICAgICAgLnNwbGl0KG9wdGlvbnNTZXBhcmF0b3IpXG4gICAgICAgIC5tYXAoa2V5VmFsdWVTdHJpbmcgPT4ga2V5VmFsdWVTdHJpbmcuc3BsaXQoa2V5VmFsdWVTZXBhcmF0b3IpKVxuICAgICAgICAubWFwKChba2V5LCAuLi52YWx1ZV0pID0+IFtrZXksIHZhbHVlLmxlbmd0aCA+IDEgPyB2YWx1ZS5qb2luKGtleVZhbHVlU2VwYXJhdG9yKSA6IHZhbHVlWzBdXSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChzb3VyY2VPcHRpb25zID0gJycsIG9wdGlvbnNDb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIG9wdGlvbnNTZXBhcmF0b3IgPSBERUZBVUxUX09QVElPTlNfU0VQQVJBVE9SLFxuICAgICAgICBrZXlWYWx1ZVNlcGFyYXRvciA9IERFRkFVTFRfS0VZX1ZBTFVFX1NFUEFSQVRPUixcbiAgICAgICAgc2tpcE9wdGlvblZhbHVlVHlwZUNvbnZlcnNpb24gPSBmYWxzZSxcbiAgICAgICAgb25PcHRpb25QYXJzZWQgPSB2b2lkIDAsXG4gICAgfSA9IG9wdGlvbnNDb25maWc7XG5cbiAgICBjb25zdCBvcHRpb25zTGlzdCA9IHR5cGVvZiBzb3VyY2VPcHRpb25zID09PSAnc3RyaW5nJyA/XG4gICAgICAgIHBhcnNlT3B0aW9uc1N0cmluZyhzb3VyY2VPcHRpb25zLCBvcHRpb25zU2VwYXJhdG9yLCBrZXlWYWx1ZVNlcGFyYXRvcikgOlxuICAgICAgICBPYmplY3QuZW50cmllcyhzb3VyY2VPcHRpb25zKTtcblxuICAgIGNvbnN0IHJlc3VsdE9wdGlvbnMgPSB7fTtcblxuICAgIGF3YWl0IFByb21pc2UuYWxsKG9wdGlvbnNMaXN0Lm1hcChhc3luYyAoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmICghc2tpcE9wdGlvblZhbHVlVHlwZUNvbnZlcnNpb24pXG4gICAgICAgICAgICB2YWx1ZSA9IGNvbnZlcnRPcHRpb25WYWx1ZVR5cGUodmFsdWUpO1xuXG4gICAgICAgIGlmIChvbk9wdGlvblBhcnNlZClcbiAgICAgICAgICAgIHZhbHVlID0gYXdhaXQgb25PcHRpb25QYXJzZWQoa2V5LCB2YWx1ZSk7XG5cbiAgICAgICAgcmVzdWx0T3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIHJlc3VsdE9wdGlvbnM7XG59XG5cbiJdfQ==
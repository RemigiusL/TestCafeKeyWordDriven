"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime_1 = require("./errors/runtime");
const types_1 = require("./errors/types");
const content_types_1 = __importDefault(require("./assets/content-types"));
const option_names_1 = __importDefault(require("./configuration/option-names"));
const INJECTABLES = __importStar(require("./assets/injectables"));
const lazyRequire = require('import-lazy')(require);
const sourceMapSupport = lazyRequire('source-map-support');
const hammerhead = lazyRequire('testcafe-hammerhead');
const loadAssets = lazyRequire('./load-assets');
const errorHandlers = lazyRequire('./utils/handle-errors');
const BrowserConnectionGateway = lazyRequire('./browser/connection/gateway');
const BrowserConnection = lazyRequire('./browser/connection');
const browserProviderPool = lazyRequire('./browser/provider/pool');
const Runner = lazyRequire('./runner');
const LiveModeRunner = lazyRequire('./live/test-runner');
// NOTE: CoffeeScript can't be loaded lazily, because it will break stack traces
require('coffeescript');
class TestCafe {
    constructor(configuration) {
        this._setupSourceMapsSupport();
        errorHandlers.registerErrorHandlers();
        const { hostname, port1, port2, options } = configuration.startOptions;
        this.closed = false;
        this.proxy = new hammerhead.Proxy(hostname, port1, port2, options);
        this.browserConnectionGateway = new BrowserConnectionGateway(this.proxy, { retryTestPages: configuration.getOption(option_names_1.default.retryTestPages) });
        this.runners = [];
        this.configuration = configuration;
        this._registerAssets(options.developmentMode);
    }
    _registerAssets(developmentMode) {
        const { favIcon, coreScript, driverScript, uiScript, uiStyle, uiSprite, automationScript, legacyRunnerScript } = loadAssets(developmentMode);
        this.proxy.GET(INJECTABLES.TESTCAFE_CORE, { content: coreScript, contentType: content_types_1.default.javascript });
        this.proxy.GET(INJECTABLES.TESTCAFE_DRIVER, { content: driverScript, contentType: content_types_1.default.javascript });
        this.proxy.GET(INJECTABLES.TESTCAFE_LEGACY_RUNNER, {
            content: legacyRunnerScript,
            contentType: content_types_1.default.javascript
        });
        this.proxy.GET(INJECTABLES.TESTCAFE_AUTOMATION, { content: automationScript, contentType: content_types_1.default.javascript });
        this.proxy.GET(INJECTABLES.TESTCAFE_UI, { content: uiScript, contentType: content_types_1.default.javascript });
        this.proxy.GET(INJECTABLES.TESTCAFE_UI_SPRITE, { content: uiSprite, contentType: content_types_1.default.png });
        this.proxy.GET(INJECTABLES.TESTCAFE_ICON, { content: favIcon, contentType: content_types_1.default.icon });
        this.proxy.GET(INJECTABLES.TESTCAFE_UI_STYLES, {
            content: uiStyle,
            contentType: content_types_1.default.css,
            isShadowUIStylesheet: true
        });
    }
    _setupSourceMapsSupport() {
        sourceMapSupport.install({
            hookRequire: true,
            handleUncaughtExceptions: false,
            environment: 'node'
        });
    }
    _createRunner(isLiveMode) {
        const Ctor = isLiveMode ? LiveModeRunner : Runner;
        const newRunner = new Ctor(this.proxy, this.browserConnectionGateway, this.configuration.clone());
        this.runners.push(newRunner);
        return newRunner;
    }
    // API
    async createBrowserConnection() {
        const browserInfo = await browserProviderPool.getBrowserInfo('remote');
        return new BrowserConnection(this.browserConnectionGateway, browserInfo, true);
    }
    createRunner() {
        return this._createRunner(false);
    }
    createLiveModeRunner() {
        if (this.runners.some(runner => runner instanceof LiveModeRunner))
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.cannotCreateMultipleLiveModeRunners);
        return this._createRunner(true);
    }
    async close() {
        if (this.closed)
            return;
        this.closed = true;
        await Promise.all(this.runners.map(runner => runner.stop()));
        await browserProviderPool.dispose();
        this.browserConnectionGateway.close();
        this.proxy.close();
    }
}
exports.default = TestCafe;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const client_script_1 = __importDefault(require("./client-script"));
function getScriptGroupValues(collection, groupByPredicate, pickUpPredicate) {
    return lodash_1.chain(collection)
        .groupBy(groupByPredicate)
        .pickBy(pickUpPredicate)
        .values()
        .value();
}
function getDuplicatedScripts(collection) {
    const contentGroups = getScriptGroupValues(collection, s => s.hash, g => g.length > 1);
    const duplicatedScripts = [];
    contentGroups.forEach(contentGroup => {
        const pageGroups = getScriptGroupValues(contentGroup, s => s.page.toString());
        if (pageGroups.length === 1 && testcafe_hammerhead_1.RequestFilterRule.isANY(pageGroups[0][0].page)) {
            duplicatedScripts.push(pageGroups[0][0]);
            return;
        }
        const forAllPagesGroup = pageGroups.find(pg => testcafe_hammerhead_1.RequestFilterRule.isANY(pg[0].page));
        if (forAllPagesGroup) {
            pageGroups
                .filter(pg => !testcafe_hammerhead_1.RequestFilterRule.isANY(pg[0].page))
                .forEach(pg => {
                duplicatedScripts.push(pg[0]);
            });
        }
        else {
            pageGroups
                .filter(pg => pg.length > 1)
                .forEach(pg => {
                duplicatedScripts.push(pg[0]);
            });
        }
    });
    return duplicatedScripts;
}
function setUniqueUrls(collection) {
    const scriptsWithDuplicatedUrls = getDuplicatedScripts(collection, i => i.url);
    for (let i = 0; i < scriptsWithDuplicatedUrls.length; i++)
        scriptsWithDuplicatedUrls[i].url = scriptsWithDuplicatedUrls[i].url + '-' + testcafe_hammerhead_1.generateUniqueId(client_script_1.default.URL_UNIQUE_PART_LENGTH);
    return collection;
}
exports.setUniqueUrls = setUniqueUrls;
function findProblematicScripts(collection) {
    const nonEmptyScripts = collection.filter(s => !!s.content);
    const duplicatedContent = getDuplicatedScripts(nonEmptyScripts);
    const empty = collection.filter(s => !s.content);
    return {
        duplicatedContent,
        empty
    };
}
exports.findProblematicScripts = findProblematicScripts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3VzdG9tLWNsaWVudC1zY3JpcHRzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsbUNBQStCO0FBQy9CLDZEQUEwRTtBQUMxRSxvRUFBMkM7QUFFM0MsU0FBUyxvQkFBb0IsQ0FBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZTtJQUN4RSxPQUFPLGNBQUssQ0FBQyxVQUFVLENBQUM7U0FDbkIsT0FBTyxDQUFDLGdCQUFnQixDQUFDO1NBQ3pCLE1BQU0sQ0FBQyxlQUFlLENBQUM7U0FDdkIsTUFBTSxFQUFFO1NBQ1IsS0FBSyxFQUFFLENBQUM7QUFDakIsQ0FBQztBQUVELFNBQVMsb0JBQW9CLENBQUUsVUFBVTtJQUNyQyxNQUFNLGFBQWEsR0FBTyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzRixNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztJQUU3QixhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFO1FBQ2pDLE1BQU0sVUFBVSxHQUFHLG9CQUFvQixDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUU5RSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLHVDQUFpQixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDM0UsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXpDLE9BQU87U0FDVjtRQUVELE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLHVDQUFpQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVwRixJQUFJLGdCQUFnQixFQUFFO1lBQ2xCLFVBQVU7aUJBQ0wsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyx1Q0FBaUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNsRCxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQ1YsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDO1NBQ1Y7YUFDSTtZQUNELFVBQVU7aUJBQ0wsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7aUJBQzNCLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDVixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7U0FDVjtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxpQkFBaUIsQ0FBQztBQUM3QixDQUFDO0FBRUQsU0FBZ0IsYUFBYSxDQUFFLFVBQVU7SUFDckMsTUFBTSx5QkFBeUIsR0FBRyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFL0UsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLHlCQUF5QixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7UUFDckQseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsc0NBQWdCLENBQUMsdUJBQVksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBRXRJLE9BQU8sVUFBVSxDQUFDO0FBQ3RCLENBQUM7QUFQRCxzQ0FPQztBQUVELFNBQWdCLHNCQUFzQixDQUFFLFVBQVU7SUFDOUMsTUFBTSxlQUFlLEdBQWdCLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pFLE1BQU0saUJBQWlCLEdBQWMsb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDM0UsTUFBTSxLQUFLLEdBQTBCLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV4RSxPQUFPO1FBQ0gsaUJBQWlCO1FBQ2pCLEtBQUs7S0FDUixDQUFDO0FBQ04sQ0FBQztBQVRELHdEQVNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2hhaW4gfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZ2VuZXJhdGVVbmlxdWVJZCwgUmVxdWVzdEZpbHRlclJ1bGUgfSBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcbmltcG9ydCBDbGllbnRTY3JpcHQgZnJvbSAnLi9jbGllbnQtc2NyaXB0JztcblxuZnVuY3Rpb24gZ2V0U2NyaXB0R3JvdXBWYWx1ZXMgKGNvbGxlY3Rpb24sIGdyb3VwQnlQcmVkaWNhdGUsIHBpY2tVcFByZWRpY2F0ZSkge1xuICAgIHJldHVybiBjaGFpbihjb2xsZWN0aW9uKVxuICAgICAgICAuZ3JvdXBCeShncm91cEJ5UHJlZGljYXRlKVxuICAgICAgICAucGlja0J5KHBpY2tVcFByZWRpY2F0ZSlcbiAgICAgICAgLnZhbHVlcygpXG4gICAgICAgIC52YWx1ZSgpO1xufVxuXG5mdW5jdGlvbiBnZXREdXBsaWNhdGVkU2NyaXB0cyAoY29sbGVjdGlvbikge1xuICAgIGNvbnN0IGNvbnRlbnRHcm91cHMgICAgID0gZ2V0U2NyaXB0R3JvdXBWYWx1ZXMoY29sbGVjdGlvbiwgcyA9PiBzLmhhc2gsIGcgPT4gZy5sZW5ndGggPiAxKTtcbiAgICBjb25zdCBkdXBsaWNhdGVkU2NyaXB0cyA9IFtdO1xuXG4gICAgY29udGVudEdyb3Vwcy5mb3JFYWNoKGNvbnRlbnRHcm91cCA9PiB7XG4gICAgICAgIGNvbnN0IHBhZ2VHcm91cHMgPSBnZXRTY3JpcHRHcm91cFZhbHVlcyhjb250ZW50R3JvdXAsIHMgPT4gcy5wYWdlLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgIGlmIChwYWdlR3JvdXBzLmxlbmd0aCA9PT0gMSAmJiBSZXF1ZXN0RmlsdGVyUnVsZS5pc0FOWShwYWdlR3JvdXBzWzBdWzBdLnBhZ2UpKSB7XG4gICAgICAgICAgICBkdXBsaWNhdGVkU2NyaXB0cy5wdXNoKHBhZ2VHcm91cHNbMF1bMF0pO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmb3JBbGxQYWdlc0dyb3VwID0gcGFnZUdyb3Vwcy5maW5kKHBnID0+IFJlcXVlc3RGaWx0ZXJSdWxlLmlzQU5ZKHBnWzBdLnBhZ2UpKTtcblxuICAgICAgICBpZiAoZm9yQWxsUGFnZXNHcm91cCkge1xuICAgICAgICAgICAgcGFnZUdyb3Vwc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIocGcgPT4gIVJlcXVlc3RGaWx0ZXJSdWxlLmlzQU5ZKHBnWzBdLnBhZ2UpKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKHBnID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZHVwbGljYXRlZFNjcmlwdHMucHVzaChwZ1swXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYWdlR3JvdXBzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihwZyA9PiBwZy5sZW5ndGggPiAxKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKHBnID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZHVwbGljYXRlZFNjcmlwdHMucHVzaChwZ1swXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkdXBsaWNhdGVkU2NyaXB0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFVuaXF1ZVVybHMgKGNvbGxlY3Rpb24pIHtcbiAgICBjb25zdCBzY3JpcHRzV2l0aER1cGxpY2F0ZWRVcmxzID0gZ2V0RHVwbGljYXRlZFNjcmlwdHMoY29sbGVjdGlvbiwgaSA9PiBpLnVybCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjcmlwdHNXaXRoRHVwbGljYXRlZFVybHMubGVuZ3RoOyBpKyspXG4gICAgICAgIHNjcmlwdHNXaXRoRHVwbGljYXRlZFVybHNbaV0udXJsID0gc2NyaXB0c1dpdGhEdXBsaWNhdGVkVXJsc1tpXS51cmwgKyAnLScgKyBnZW5lcmF0ZVVuaXF1ZUlkKENsaWVudFNjcmlwdC5VUkxfVU5JUVVFX1BBUlRfTEVOR1RIKTtcblxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFByb2JsZW1hdGljU2NyaXB0cyAoY29sbGVjdGlvbikge1xuICAgIGNvbnN0IG5vbkVtcHR5U2NyaXB0cyAgICAgICAgICAgICAgPSBjb2xsZWN0aW9uLmZpbHRlcihzID0+ICEhcy5jb250ZW50KTtcbiAgICBjb25zdCBkdXBsaWNhdGVkQ29udGVudCAgICAgICAgICAgID0gZ2V0RHVwbGljYXRlZFNjcmlwdHMobm9uRW1wdHlTY3JpcHRzKTtcbiAgICBjb25zdCBlbXB0eSAgICAgICAgICAgICAgICAgICAgICAgID0gY29sbGVjdGlvbi5maWx0ZXIocyA9PiAhcy5jb250ZW50KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGR1cGxpY2F0ZWRDb250ZW50LFxuICAgICAgICBlbXB0eVxuICAgIH07XG59XG4iXX0=
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_base_1 = __importDefault(require("./configuration-base"));
const option_source_1 = __importDefault(require("./option-source"));
const default_values_1 = require("./default-values");
const lodash_1 = require("lodash");
const warning_message_1 = __importDefault(require("../notifications/warning-message"));
const render_template_1 = __importDefault(require("../utils/render-template"));
const runtime_1 = require("../errors/runtime");
const types_1 = require("../errors/types");
const lazyRequire = require('import-lazy')(require);
const typescript = lazyRequire('typescript');
class TypescriptConfiguration extends configuration_base_1.default {
    constructor(tsConfigPath) {
        const basePath = process.cwd();
        super(tsConfigPath);
        this.basePath = basePath;
        for (const option in default_values_1.DEFAULT_TYPESCRIPT_COMPILER_OPTIONS)
            this._ensureOptionWithValue(option, default_values_1.DEFAULT_TYPESCRIPT_COMPILER_OPTIONS[option], option_source_1.default.configuration);
    }
    async init() {
        const opts = await this._load();
        if (opts && opts.compilerOptions) {
            const parsedOpts = this._parseOptions(opts);
            this.mergeOptions(parsedOpts);
        }
        this._notifyThatOptionsCannotBeOverriden();
    }
    async _isConfigurationFileExists() {
        const fileExists = await super._isConfigurationFileExists();
        if (!fileExists)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.cannotFindTypescriptConfigurationFile, this.filePath);
        return true;
    }
    _parseOptions(opts) {
        const parsed = typescript.parseJsonConfigFileContent(opts, typescript.sys, this.basePath, void 0, this._filePath);
        return lodash_1.omit(parsed.options, default_values_1.TYPESCRIPT_BLACKLISTED_OPTIONS);
    }
    _notifyThatOptionsCannotBeOverriden() {
        const warnedOptions = lodash_1.intersection(this._overridenOptions, default_values_1.TYPESCRIPT_COMPILER_NON_OVERRIDABLE_OPTIONS);
        if (!warnedOptions.length)
            return;
        const warningMessage = warnedOptions
            .map(option => render_template_1.default(warning_message_1.default.cannotOverrideTypeScriptConfigOptions, option))
            .join('\n');
        configuration_base_1.default._showConsoleWarning(warningMessage);
    }
    _setOptionValue(option, value) {
        if (default_values_1.TYPESCRIPT_COMPILER_NON_OVERRIDABLE_OPTIONS.indexOf(option.name) === -1)
            super._setOptionValue(option, value);
    }
}
exports.default = TypescriptConfiguration;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXNjcmlwdC1jb25maWd1cmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZ3VyYXRpb24vdHlwZXNjcmlwdC1jb25maWd1cmF0aW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOEVBQWlEO0FBQ2pELG9FQUEyQztBQUMzQyxxREFBb0o7QUFDcEosbUNBQTRDO0FBQzVDLHVGQUFnRTtBQUNoRSwrRUFBc0Q7QUFDdEQsK0NBQWlEO0FBQ2pELDJDQUFpRDtBQUVqRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEQsTUFBTSxVQUFVLEdBQUksV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRTlDLE1BQXFCLHVCQUF3QixTQUFRLDRCQUFhO0lBQzlELFlBQWEsWUFBWTtRQUNyQixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFL0IsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXBCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBRXpCLEtBQUssTUFBTSxNQUFNLElBQUksb0RBQW1DO1lBQ3BELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsb0RBQW1DLENBQUMsTUFBTSxDQUFDLEVBQUUsdUJBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNySCxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUk7UUFDTixNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVoQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQzlCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFNUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNqQztRQUVELElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxLQUFLLENBQUMsMEJBQTBCO1FBQzVCLE1BQU0sVUFBVSxHQUFHLE1BQU0sS0FBSyxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFFNUQsSUFBSSxDQUFDLFVBQVU7WUFDWCxNQUFNLElBQUksc0JBQVksQ0FBQyxzQkFBYyxDQUFDLHFDQUFxQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVoRyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsYUFBYSxDQUFFLElBQUk7UUFDZixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsMEJBQTBCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFbEgsT0FBTyxhQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSwrQ0FBOEIsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxtQ0FBbUM7UUFDL0IsTUFBTSxhQUFhLEdBQUcscUJBQVksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsNERBQTJDLENBQUMsQ0FBQztRQUV4RyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU07WUFDckIsT0FBTztRQUVYLE1BQU0sY0FBYyxHQUFHLGFBQWE7YUFDL0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMseUJBQWMsQ0FBQyx5QkFBZ0IsQ0FBQyxxQ0FBcUMsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUM3RixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFaEIsNEJBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsZUFBZSxDQUFFLE1BQU0sRUFBRSxLQUFLO1FBQzFCLElBQUksNERBQTJDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkUsS0FBSyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNKO0FBeERELDBDQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25maWd1cmF0aW9uIGZyb20gJy4vY29uZmlndXJhdGlvbi1iYXNlJztcbmltcG9ydCBvcHRpb25Tb3VyY2UgZnJvbSAnLi9vcHRpb24tc291cmNlJztcbmltcG9ydCB7IERFRkFVTFRfVFlQRVNDUklQVF9DT01QSUxFUl9PUFRJT05TLCBUWVBFU0NSSVBUX0NPTVBJTEVSX05PTl9PVkVSUklEQUJMRV9PUFRJT05TLCBUWVBFU0NSSVBUX0JMQUNLTElTVEVEX09QVElPTlMgfSBmcm9tICcuL2RlZmF1bHQtdmFsdWVzJztcbmltcG9ydCB7IGludGVyc2VjdGlvbiwgb21pdCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgV0FSTklOR19NRVNTQUdFUyBmcm9tICcuLi9ub3RpZmljYXRpb25zL3dhcm5pbmctbWVzc2FnZSc7XG5pbXBvcnQgcmVuZGVyVGVtcGxhdGUgZnJvbSAnLi4vdXRpbHMvcmVuZGVyLXRlbXBsYXRlJztcbmltcG9ydCB7IEdlbmVyYWxFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCB7IFJVTlRJTUVfRVJST1JTIH0gZnJvbSAnLi4vZXJyb3JzL3R5cGVzJztcblxuY29uc3QgbGF6eVJlcXVpcmUgPSByZXF1aXJlKCdpbXBvcnQtbGF6eScpKHJlcXVpcmUpO1xuY29uc3QgdHlwZXNjcmlwdCAgPSBsYXp5UmVxdWlyZSgndHlwZXNjcmlwdCcpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUeXBlc2NyaXB0Q29uZmlndXJhdGlvbiBleHRlbmRzIENvbmZpZ3VyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yICh0c0NvbmZpZ1BhdGgpIHtcbiAgICAgICAgY29uc3QgYmFzZVBhdGggPSBwcm9jZXNzLmN3ZCgpO1xuXG4gICAgICAgIHN1cGVyKHRzQ29uZmlnUGF0aCk7XG5cbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuXG4gICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIGluIERFRkFVTFRfVFlQRVNDUklQVF9DT01QSUxFUl9PUFRJT05TKVxuICAgICAgICAgICAgdGhpcy5fZW5zdXJlT3B0aW9uV2l0aFZhbHVlKG9wdGlvbiwgREVGQVVMVF9UWVBFU0NSSVBUX0NPTVBJTEVSX09QVElPTlNbb3B0aW9uXSwgb3B0aW9uU291cmNlLmNvbmZpZ3VyYXRpb24pO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQgKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gYXdhaXQgdGhpcy5fbG9hZCgpO1xuXG4gICAgICAgIGlmIChvcHRzICYmIG9wdHMuY29tcGlsZXJPcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRPcHRzID0gdGhpcy5fcGFyc2VPcHRpb25zKG9wdHMpO1xuXG4gICAgICAgICAgICB0aGlzLm1lcmdlT3B0aW9ucyhwYXJzZWRPcHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX25vdGlmeVRoYXRPcHRpb25zQ2Fubm90QmVPdmVycmlkZW4oKTtcbiAgICB9XG5cbiAgICBhc3luYyBfaXNDb25maWd1cmF0aW9uRmlsZUV4aXN0cyAoKSB7XG4gICAgICAgIGNvbnN0IGZpbGVFeGlzdHMgPSBhd2FpdCBzdXBlci5faXNDb25maWd1cmF0aW9uRmlsZUV4aXN0cygpO1xuXG4gICAgICAgIGlmICghZmlsZUV4aXN0cylcbiAgICAgICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoUlVOVElNRV9FUlJPUlMuY2Fubm90RmluZFR5cGVzY3JpcHRDb25maWd1cmF0aW9uRmlsZSwgdGhpcy5maWxlUGF0aCk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgX3BhcnNlT3B0aW9ucyAob3B0cykge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0eXBlc2NyaXB0LnBhcnNlSnNvbkNvbmZpZ0ZpbGVDb250ZW50KG9wdHMsIHR5cGVzY3JpcHQuc3lzLCB0aGlzLmJhc2VQYXRoLCB2b2lkIDAsIHRoaXMuX2ZpbGVQYXRoKTtcblxuICAgICAgICByZXR1cm4gb21pdChwYXJzZWQub3B0aW9ucywgVFlQRVNDUklQVF9CTEFDS0xJU1RFRF9PUFRJT05TKTtcbiAgICB9XG5cbiAgICBfbm90aWZ5VGhhdE9wdGlvbnNDYW5ub3RCZU92ZXJyaWRlbiAoKSB7XG4gICAgICAgIGNvbnN0IHdhcm5lZE9wdGlvbnMgPSBpbnRlcnNlY3Rpb24odGhpcy5fb3ZlcnJpZGVuT3B0aW9ucywgVFlQRVNDUklQVF9DT01QSUxFUl9OT05fT1ZFUlJJREFCTEVfT1BUSU9OUyk7XG5cbiAgICAgICAgaWYgKCF3YXJuZWRPcHRpb25zLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjb25zdCB3YXJuaW5nTWVzc2FnZSA9IHdhcm5lZE9wdGlvbnNcbiAgICAgICAgICAgIC5tYXAob3B0aW9uID0+IHJlbmRlclRlbXBsYXRlKFdBUk5JTkdfTUVTU0FHRVMuY2Fubm90T3ZlcnJpZGVUeXBlU2NyaXB0Q29uZmlnT3B0aW9ucywgb3B0aW9uKSlcbiAgICAgICAgICAgIC5qb2luKCdcXG4nKTtcblxuICAgICAgICBDb25maWd1cmF0aW9uLl9zaG93Q29uc29sZVdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgIH1cblxuICAgIF9zZXRPcHRpb25WYWx1ZSAob3B0aW9uLCB2YWx1ZSkge1xuICAgICAgICBpZiAoVFlQRVNDUklQVF9DT01QSUxFUl9OT05fT1ZFUlJJREFCTEVfT1BUSU9OUy5pbmRleE9mKG9wdGlvbi5uYW1lKSA9PT0gLTEpXG4gICAgICAgICAgICBzdXBlci5fc2V0T3B0aW9uVmFsdWUob3B0aW9uLCB2YWx1ZSk7XG4gICAgfVxufVxuIl19